export var FlashcardStatus;
(function (FlashcardStatus) {
    FlashcardStatus[FlashcardStatus["NEW"] = 0] = "NEW";
    FlashcardStatus[FlashcardStatus["CHANGE"] = 1] = "CHANGE";
    FlashcardStatus[FlashcardStatus["NO_CHANGE"] = 2] = "NO_CHANGE";
})(FlashcardStatus || (FlashcardStatus = {}));
export class Flashcard {
    constructor({ type = '', name = '', definition = '', imageTag = '', idTag = '', status = FlashcardStatus.NO_CHANGE }) {
        this.type = type;
        this.name = name;
        this.definition = definition;
        this.imageTag = imageTag;
        this.idTag = idTag;
        this.status = status;
    }
    populateNewFlashcard(type, name, definition, imageTag, isUpdate) {
        this.type = type;
        this.name = name;
        this.definition = definition;
        this.imageTag = imageTag || '';
        this.status = isUpdate ? FlashcardStatus.CHANGE : FlashcardStatus.NEW;
    }
    populateFromExistingFlashcard(type, name, flashcardSection) {
        this.type = type;
        this.name = name;
        this.imageTag = this.extractImageMarkdownTag(flashcardSection) || '';
        if (type == 'basic') {
            this.definition = this.getFlashcardBack(flashcardSection);
        }
        else if (type == 'reverse') {
            this.definition = this.getFlashcardFront(flashcardSection);
        }
        this.idTag = this.extractIdTag(flashcardSection) || '';
    }
    generateFlashcardSection(type) {
        const idTag = this.status == FlashcardStatus.NEW ? '' : '\n' + this.idTag;
        if (type == 'basic') {
            if (this.definition.includes('(http')) {
                this.imageTag = '';
            }
            return `###### ${this.name} #flashcard \nSTART\nBasic\n${this.name}\nBack:\n${this.definition}\n${this.imageTag}\nTARGET DECK: Brain::Atoms${idTag}\nEND`;
        }
        else {
            return `###### ${this.name}-Reverse #flashcard/reverse \nSTART\nBasic\n${this.definition}\nBack:\n${this.name}\nTARGET DECK: Brain::Atoms::Reverse${idTag}\nEND`;
        }
    }
    extractImageUrl(content) {
        const imageRegex = /!\[.*?\]\((https?:\/\/[^\s)]+)\)/;
        const match = content.match(imageRegex);
        return match ? match[1] : null;
    }
    extractImageMarkdownTag(content) {
        const imageRegex = /!\[.*?\]\(https?:\/\/[^\s)]+\)/;
        const match = content.match(imageRegex) || '';
        return match ? match[0] : null;
    }
    getFlashcardFront(flashcardText) {
        const regex = /(?<=Basic\s)([\s\S]*?)(?=\s*Back:)/;
        const match = flashcardText.match(regex);
        return match ? match[0].trim() : '';
    }
    getFlashcardBack(flashcardText) {
        const regex = /(?<=Back:\s)([\s\S]*?)(?=\s*TARGET DECK: Brain::(Atoms|Protons)(::Reverse)?)/;
        const match = flashcardText.match(regex);
        return match ? match[0].trim() : '';
    }
    extractIdTag(content) {
        const idRegex = /<!--ID: \d{1,16}-->/;
        const match = content.match(idRegex);
        return match ? match[0] : null;
    }
    isDirty() {
        let isDirty = false;
        if (this.status == FlashcardStatus.NEW || this.status == FlashcardStatus.CHANGE) {
            isDirty = true;
        }
        return isDirty;
    }
}
//# sourceMappingURL=data:application/json;base64,