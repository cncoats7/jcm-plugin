import { Flashcard } from './flashcard';
export class Quark {
    constructor({ name = '', type = '', createFlashcard = false, createReverseFlashcard = false, definition = '', flashcardInfo = '', reverseFlashcardInfo = '', basicFlashcard = new Flashcard({}), reverseFlashcard = new Flashcard({}), }) {
        this.name = name;
        this.type = type;
        this.createFlashcard = createFlashcard;
        this.createReverseFlashcard = createReverseFlashcard;
        this.definition = definition;
        this.flashcardInfo = flashcardInfo;
        this.reverseFlashcardInfo = reverseFlashcardInfo;
        this.basicFlashcard = basicFlashcard;
        this.reverseFlashcard = reverseFlashcard;
    }
    rawDefinition() {
        let rawDefinition = this.definition.replace('[!definition]', '').replace('>[!definition] ', '');
        let definitionLines = rawDefinition.split('\n');
        let rawDefinitionLines = [];
        definitionLines.forEach(element => {
            if (element[0] === '>') {
                rawDefinitionLines.push(element.slice(1));
            }
            else {
                rawDefinitionLines.push(element);
            }
        });
        rawDefinition = rawDefinitionLines.join('\n').trim();
        return rawDefinition;
    }
    generateReverseFlashcardSection() {
        const rawDefinition = this.rawDefinition().trim();
        return `\n##### ${this.name}-Reverse #flashcard/reverse \nSTART\nBasic\n${rawDefinition}\nBack:\n${this.name}\n\nTARGET DECK: Brain::Atoms::Reverse`;
    }
    removeSuccessiveNewlines(content) {
        return content.replace(/\n{2,}/g, '\n');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhcmsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXRvbS9xdWFyay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBYXhDLE1BQU0sT0FBTyxLQUFLO0lBV2QsWUFBWSxFQUNSLElBQUksR0FBRyxFQUFFLEVBQ1QsSUFBSSxHQUFHLEVBQUUsRUFDVCxlQUFlLEdBQUcsS0FBSyxFQUN2QixzQkFBc0IsR0FBRyxLQUFLLEVBQzlCLFVBQVUsR0FBRyxFQUFFLEVBQ2YsYUFBYSxHQUFHLEVBQUUsRUFDbEIsb0JBQW9CLEdBQUcsRUFBRSxFQUN6QixjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQ2xDLGdCQUFnQixHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUNoQjtRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQztRQUN2QyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsc0JBQXNCLENBQUM7UUFDckQsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUM3QyxDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEcsSUFBSSxlQUFlLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxJQUFJLGtCQUFrQixHQUFhLEVBQUUsQ0FBQztRQUN0QyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzlCLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDcEIsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QztpQkFBTTtnQkFDSCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDcEM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILGFBQWEsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFckQsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUVELCtCQUErQjtRQUMzQixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7UUFDakQsT0FBTyxXQUFXLElBQUksQ0FBQyxJQUFJLCtDQUErQyxhQUFhLFlBQVksSUFBSSxDQUFDLElBQUksd0NBQXdDLENBQUM7SUFDekosQ0FBQztJQUVELHdCQUF3QixDQUFDLE9BQWU7UUFDcEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBSUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGbGFzaGNhcmQgfSBmcm9tICcuL2ZsYXNoY2FyZCc7XG5leHBvcnQgaW50ZXJmYWNlIFF1YXJrQ29uc3RydWN0b3JQcm9wcyB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICB0eXBlPzogc3RyaW5nO1xuICAgIGNyZWF0ZUZsYXNoY2FyZD86IGJvb2xlYW47XG4gICAgY3JlYXRlUmV2ZXJzZUZsYXNoY2FyZD86IGJvb2xlYW47XG4gICAgZGVmaW5pdGlvbj86IHN0cmluZztcbiAgICBmbGFzaGNhcmRJbmZvPzogc3RyaW5nO1xuICAgIHJldmVyc2VGbGFzaGNhcmRJbmZvPzogc3RyaW5nO1xuICAgIGJhc2ljRmxhc2hjYXJkPzogRmxhc2hjYXJkO1xuICAgIHJldmVyc2VGbGFzaGNhcmQ/OiBGbGFzaGNhcmQ7XG59XG5cbmV4cG9ydCBjbGFzcyBRdWFyayB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBjcmVhdGVGbGFzaGNhcmQ6IGJvb2xlYW47XG4gICAgY3JlYXRlUmV2ZXJzZUZsYXNoY2FyZDogYm9vbGVhbjtcbiAgICBkZWZpbml0aW9uOiBzdHJpbmc7XG4gICAgZmxhc2hjYXJkSW5mbzogc3RyaW5nO1xuICAgIHJldmVyc2VGbGFzaGNhcmRJbmZvOiBzdHJpbmc7XG4gICAgYmFzaWNGbGFzaGNhcmQ6IEZsYXNoY2FyZDtcbiAgICByZXZlcnNlRmxhc2hjYXJkOiBGbGFzaGNhcmQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIG5hbWUgPSAnJyxcbiAgICAgICAgdHlwZSA9ICcnLFxuICAgICAgICBjcmVhdGVGbGFzaGNhcmQgPSBmYWxzZSxcbiAgICAgICAgY3JlYXRlUmV2ZXJzZUZsYXNoY2FyZCA9IGZhbHNlLFxuICAgICAgICBkZWZpbml0aW9uID0gJycsXG4gICAgICAgIGZsYXNoY2FyZEluZm8gPSAnJyxcbiAgICAgICAgcmV2ZXJzZUZsYXNoY2FyZEluZm8gPSAnJyxcbiAgICAgICAgYmFzaWNGbGFzaGNhcmQgPSBuZXcgRmxhc2hjYXJkKHt9KSxcbiAgICAgICAgcmV2ZXJzZUZsYXNoY2FyZCA9IG5ldyBGbGFzaGNhcmQoe30pLFxuICAgIH06IFF1YXJrQ29uc3RydWN0b3JQcm9wcykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmNyZWF0ZUZsYXNoY2FyZCA9IGNyZWF0ZUZsYXNoY2FyZDtcbiAgICAgICAgdGhpcy5jcmVhdGVSZXZlcnNlRmxhc2hjYXJkID0gY3JlYXRlUmV2ZXJzZUZsYXNoY2FyZDtcbiAgICAgICAgdGhpcy5kZWZpbml0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgdGhpcy5mbGFzaGNhcmRJbmZvID0gZmxhc2hjYXJkSW5mbztcbiAgICAgICAgdGhpcy5yZXZlcnNlRmxhc2hjYXJkSW5mbyA9IHJldmVyc2VGbGFzaGNhcmRJbmZvO1xuICAgICAgICB0aGlzLmJhc2ljRmxhc2hjYXJkID0gYmFzaWNGbGFzaGNhcmQ7XG4gICAgICAgIHRoaXMucmV2ZXJzZUZsYXNoY2FyZCA9IHJldmVyc2VGbGFzaGNhcmQ7XG4gICAgfVxuXG4gICAgcmF3RGVmaW5pdGlvbigpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcmF3RGVmaW5pdGlvbiA9IHRoaXMuZGVmaW5pdGlvbi5yZXBsYWNlKCdbIWRlZmluaXRpb25dJywgJycpLnJlcGxhY2UoJz5bIWRlZmluaXRpb25dICcsICcnKTtcbiAgICAgICAgbGV0IGRlZmluaXRpb25MaW5lcyA9IHJhd0RlZmluaXRpb24uc3BsaXQoJ1xcbicpO1xuICAgICAgICBsZXQgcmF3RGVmaW5pdGlvbkxpbmVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBkZWZpbml0aW9uTGluZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50WzBdID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICByYXdEZWZpbml0aW9uTGluZXMucHVzaChlbGVtZW50LnNsaWNlKDEpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmF3RGVmaW5pdGlvbkxpbmVzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJhd0RlZmluaXRpb24gPSByYXdEZWZpbml0aW9uTGluZXMuam9pbignXFxuJykudHJpbSgpO1xuXG4gICAgICAgIHJldHVybiByYXdEZWZpbml0aW9uO1xuICAgIH1cblxuICAgIGdlbmVyYXRlUmV2ZXJzZUZsYXNoY2FyZFNlY3Rpb24oKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgcmF3RGVmaW5pdGlvbiA9IHRoaXMucmF3RGVmaW5pdGlvbigpLnRyaW0oKVxuICAgICAgICByZXR1cm4gYFxcbiMjIyMjICR7dGhpcy5uYW1lfS1SZXZlcnNlICNmbGFzaGNhcmQvcmV2ZXJzZSBcXG5TVEFSVFxcbkJhc2ljXFxuJHtyYXdEZWZpbml0aW9ufVxcbkJhY2s6XFxuJHt0aGlzLm5hbWV9XFxuXFxuVEFSR0VUIERFQ0s6IEJyYWluOjpBdG9tczo6UmV2ZXJzZWA7XG4gICAgfVxuXG4gICAgcmVtb3ZlU3VjY2Vzc2l2ZU5ld2xpbmVzKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoL1xcbnsyLH0vZywgJ1xcbicpO1xuICAgIH1cblxuICAgIFxuICAgIC8vIEFkZGl0aW9uYWwgc2hhcmVkIG1ldGhvZHMgY2FuIGJlIGFkZGVkIGhlcmVcbn0iXX0=